package uk.ac.abdn.erg.iain.strigidoc;

import java.io.IOException;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;

import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.OWLAnnotation;
import org.semanticweb.owlapi.model.OWLAnnotationProperty;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLDataProperty;
import org.semanticweb.owlapi.model.OWLEntity;
import org.semanticweb.owlapi.model.OWLObjectProperty;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyCreationException;
import org.semanticweb.owlapi.model.OWLOntologyManager;

public class Ontology {

	private OWLOntologyManager m;
	private OWLOntology o;

	protected String iri;
	protected String abstr = null;
	protected String intro = null;

	protected Set<String> contrib;
	protected Set<String> imports;

	protected Set<OntObject> classes;
	protected Set<OntObject> objprops;
	protected Set<OntObject> dataprops;
	protected Set<OntObject> annprops;

	public Ontology(String iri) throws OWLOntologyCreationException,
			IOException {

		m = OWLManager.createOWLOntologyManager();

		o = m.loadOntologyFromOntologyDocument(new URL(iri).openStream());

		this.iri = o.getOntologyID().getOntologyIRI().toString();
		abstr = getAbstract();
		intro = getIntroduction();

		contrib = getContributors();
		imports = getImports();
		
		classes = getClasses();
		dataprops = getDataProperties();
		objprops = getObjectProperties();
		annprops = getAnnotationProperties();
	}

	private Set<String> getContributors() {
		
		HashSet<String> ret = new HashSet<String>();
		
		Set<OWLAnnotation> anns = o.getAnnotations();
		
		for (OWLAnnotation a : anns) {
			if (a.getProperty().getIRI().toString()
					.equals("http://purl.org/dc/elements/1.1/creator")) {
				ret.add(a.getValue().toString().replaceAll("\"", ""));
			}
		}
		
		return ret;
	}
	
	private Set<String> getImports() {
		Set<OWLOntology> owlImports = o.getDirectImports();
		Set<String> ret = new HashSet<String>();
		
		for ( OWLOntology im : owlImports ) {
			ret.add(im.getOntologyID().getOntologyIRI().toString());
		}
		
		return ret;
	}

	private String getAbstract() {

		Set<OWLAnnotation> anns = o.getAnnotations();

		for (OWLAnnotation a : anns) {

			if (a.getProperty().getIRI().toString()
					.equals("http://www.w3.org/2000/01/rdf-schema#comment")) {
				String ret = a.getValue().toString();
				ret = ret.substring(1, ret.length() - 1);
				return ret;
			}

		}

		return null;
	}

	private String getIntroduction() {

		Set<OWLAnnotation> anns = o.getAnnotations();

		for (OWLAnnotation a : anns) {

			if (a.getProperty().getIRI().toString()
					.equals("http://purl.org/dc/elements/1.1/description")
					&& (!a.getValue().toString().startsWith("http://"))) {
				String ret = a.getValue().toString();
				ret = ret.substring(1, ret.length() - 1);
				return ret;
			}

		}

		return null;
	}

	private Set<OntObject> getClasses() {

		Set<OWLClass> owlClasses = o.getClassesInSignature();
		Set<OntObject> ret = new HashSet<OntObject>();

		for (OWLClass c : owlClasses) {
			if (!belongs((OWLEntity) c)) {
				continue;
			}
			OntObject ob = OntObjectFactory.createFromClass(c, o);
			ret.add(ob);
		}

		return ret;
	}

	private Set<OntObject> getDataProperties() {

		Set<OWLDataProperty> owlDataProperties = o
				.getDataPropertiesInSignature();
		Set<OntObject> ret = new HashSet<OntObject>();

		for (OWLDataProperty p : owlDataProperties) {
			if (!belongs((OWLEntity) p)) {
				continue;
			}
			OntObject ob = OntObjectFactory.createFromProperty(
					OntObject.OntObjectType.DATA_PROPERTY, p, o);
			ret.add(ob);
		}

		return ret;
	}

	private Set<OntObject> getObjectProperties() {

		Set<OWLObjectProperty> owlObjectProperties = o
				.getObjectPropertiesInSignature();
		Set<OntObject> ret = new HashSet<OntObject>();

		for (OWLObjectProperty p : owlObjectProperties) {
			if (!belongs((OWLEntity) p)) {
				continue;
			}
			OntObject ob = OntObjectFactory.createFromProperty(
					OntObject.OntObjectType.OBJECT_PROPERTY, p, o);
			ret.add(ob);
		}

		return ret;
	}

	private Set<OntObject> getAnnotationProperties() {

		Set<OWLAnnotationProperty> owlAnnotationProperties = o
				.getAnnotationPropertiesInSignature();
		Set<OntObject> ret = new HashSet<OntObject>();

		for (OWLAnnotationProperty p : owlAnnotationProperties) {
			if (!belongs((OWLEntity) p)) {
				continue;
			}
			OntObject ob = OntObjectFactory.createFromAnnotationProperty(p, o);
			ret.add(ob);
		}

		return ret;
	}

	private boolean belongs(OWLEntity e) {
		return e.getIRI().toString()
				.startsWith(o.getOntologyID().getOntologyIRI().toString());
	}

}
